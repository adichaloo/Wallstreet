from .models import *from .insertUtilities import *def MatchBuy(company, user, buyPrice, noShares):    # Get all the indexes of the table startindex, endindex    buyStartIndex = company.buyStartPointer    buyEndIndex = company.buyEndPointer    sellStartIndex = company.sellStartPointer    sellEndIndex = company.sellEndPointer    baseIndex = company.basePointer    try:        # Getting the entries at start position, end position in the table        startValue = BuyTable.objects.get(pk=buyStartIndex)        endValue = BuyTable.objects.get(pk=buyEndIndex)        mid = int((buyStartIndex + buyEndIndex) / 2)        # If the new-buyprice is greater than old top entry        if buyPrice > startValue.bidPrice:            # Highest Bid, hence matching            # Get the sellbid at top in selltable            sellBid = SellTable.objects.get(pk=sellStartIndex)            # If the new-shares are less than total sellshares then process only new-shares and            # keep selltable entry as it is by reducing sellshares            if noShares < sellBid.sellShares:                # User Processing Remaining                sellBid.sellShares -= noShares                sellBid.save()            # If new-shares are more, then remove entry from sell table and add user in buy table at top with            # remaining shares            if noShares > sellBid.sellShares:                # User Processing Remaining                # Apply for loop here for eliminating all possible shares                insertFirst(BuyTable, buyPrice, noShares - sellBid.sellShares, company, user, buyStartIndex,                            buyEndIndex)        # If the new-buyprice entry is less than least buyprice in table    except:        # If no entry exist then create one at startindex        BuyTable.objects.create(pk=buyStartIndex, company=company, profile=user, bidShares=noShares, bidPrice=buyPrice)def userTransaction(company, buyTable, sellTable, buyObject, sellObject):    userBuy = Profile.objects.get(pk=buyObject.profile.pk)    userSell = Profile.objects.get(pk=sellObject.profile.pk)    UserShareTable.objects.create(profile=userBuy, company=company, bidShares=buyObject.bidShares,                                  bidPrice=buyObject.bidPrice)    moneyAlter(userSell, sellObject.bidPrice * sellObject.bidShares, True)    if buyObject.noShares == sellObject.noShares:        UserHistory.objects.create(profile=userBuy,company=company,bidShares=buyObject.bidShares,bidPrice=buyObject.bidPrice,buySell=True)        UserHistory.objects.create(profile=userSell, company=company, bidShares=sellObject.bidShares,                                   bidPrice=sellObject.bidPrice, buySell=False)        buyTable.objects.get(pk=buyObject.pk).delete()        sellTable.objects.get(pk=sellObject.pk).delete()        return 0    elif buyObject.bidShares > sellObject.bidShares:        buyObject.bidShares -= sellObject.bidShares        buyObject.save()        UserHistory.objects.create(profile=userBuy, company=company, bidShares=buyObject.bidShares,                                   bidPrice=buyObject.bidPrice, buySell=True)        UserHistory.objects.create(profile=userSell, company=company, bidShares=sellObject.bidShares,                                   bidPrice=sellObject.bidPrice, buySell=False)        sellTable.objects.get(pk=sellObject.pk).delete()        return 1    else:        sellObject.bidShares -= buyObject.bidShares        sellObject.save()        UserHistory.objects.create(profile=userBuy, company=company, bidShares=buyObject.bidShares,                                   bidPrice=buyObject.bidPrice, buySell=True)        UserHistory.objects.create(profile=userSell, company=company, bidShares=sellObject.bidShares,                                   bidPrice=sellObject.bidPrice, buySell=False)        buyTable.objects.get(pk=buyObject.pk).delete()        return -1def moneyAlter(user, amount, addSubtract):    # addSubtract = 1 => Add money    # addSubtract = 0 => Subtract Money    cut = amount * 0.01    amount = amount - cut    if addSubtract:        user.cash = user.cash + amount    else:        user.cash = user.cash - amount    user.save()